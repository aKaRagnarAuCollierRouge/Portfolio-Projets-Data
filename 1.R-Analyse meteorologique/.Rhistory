library(readr)
library(dplyr)
library(forcats)
library(ggplot2)
library(ggpur)
library(readr)
library(dplyr)
library(forcats)
library(ggplot2)
donnees_temperature <- read_csv(
"data/donnees_temperature_corrigees.csv",
col_types = c("fDfnnnfffnffnnn")
)
donnees_temperature <- donnees_temperature |>
mutate(
departement=fct_relevel(donnees_temperature$departement,sort),
region=fct_relevel(donnees_temperature$region,sort),
code_insee_department=fct_inseq(donnees_temperature$code_insee_departement)
)
summary(donnees_temperature)
#Représentation graphique
# représentation graphique
donnees_temperature |>
ggplot() +
aes(x = tmoy, y = tmin) +
geom_point(alpha  = 0.2, size = 0.2) +
theme_classic()
#calcul de l'équation linéaire
regression_lineaire <- lm(tmin ~ tmoy, data = donnees_temperature)
## coefficient
regression_lineaire
# validation du modèle (montré les résidus)
summary(regression_lineaire)
# Visualisation des donnees
donnees_temperature |>
ggplot()+
aes(x=tmoy,y=tmin)+
geom_point(alpha=0.2,size=0.2)+
theme_classic()
# Autre visualisation
donnees_temperature |>
ggplot() +
aes(x = tmoy, y = tmin) +
geom_point(alpha  = 0.2, size = 0.2) +
geom_smooth(method = "lm") +
geom_abline(aes(slope = 0.86, intercept = -2.93), color = "red") +
ggpubr::stat_regline_equation() +
theme_classic()
# représentation graphique
donnees_temperature |>
ggplot() +
aes(x = tmin, y = tmax) +
geom_point(alpha  = 0.2, size = 0.2) +
theme_classic()
# calcul de l'équation linéaire
regression_lineaire <- lm(tmax ~ tmin, data = donnees_temperature)
## coefficient
regression_lineaire
# validation du modèle (montré les résidus)
summary(regression_lineaire)
# autre visualisation
donnees_temperature |>
ggplot() +
aes(x = tmin, y = tmax) +
geom_point(alpha  = 0.2, size = 0.2) +
geom_smooth(method = "lm") +
ggpubr::stat_regline_equation() +
theme_classic()
# représentation graphique
donnees_temperature |>
ggplot() +
aes(x = tmin, y = densite_humaine_par_km_carre ) +
geom_point(alpha  = 0.2, size = 0.2) +
theme_classic()
donnees_temperature_province <- donnees_temperature |>
filter(region != "Île-de-France") |>
droplevels()
table(donnees_temperature_province$region, donnees_temperature_province$densite_pop, useNA = "ifany")
count(donnees_temperature_province, region, densite_pop, .drop = FALSE)
count(donnees_temperature_province, region, densite_pop)
donnees_temperature_province |>
count(region, densite_pop) |>
ggplot() +
aes(x = densite_pop, y = region, fill = n) +
geom_tile() +
theme_classic()
table(donnees_temperature_province$region, donnees_temperature_province$densite_pop) |>
chisq.test()
donnees_temperature |>
ggplot() +
aes(x = densite_pop, y = tmin, color = densite_pop) +
geom_boxplot() +
theme_classic()
bartlett.test(tmin ~ densite_pop, data = donnees_temperature)
anova <- aov(
tmin ~ densite_pop, data = donnees_temperature
)
summary(anova)
# vérification de la normalité des résidus
plot(anova)
TukeyHSD(anova)
tukey <- glht(anova, linfct = mcp(densite_pop = "Tukey"))
library(readr)
library(dplyr)
library(forcats)
library(ggplot2)
donnees_temperature <- read_csv(
"data/donnees_temperature_corrigees.csv",
col_types = c("fDfnnnfffnffnnn")
)
donnees_temperature <- donnees_temperature |>
mutate(
departement=fct_relevel(donnees_temperature$departement,sort),
region=fct_relevel(donnees_temperature$region,sort),
code_insee_department=fct_inseq(donnees_temperature$code_insee_departement)
)
summary(donnees_temperature)
#Représentation graphique
# représentation graphique
donnees_temperature |>
ggplot() +
aes(x = tmoy, y = tmin) +
geom_point(alpha  = 0.2, size = 0.2) +
theme_classic()
#calcul de l'équation linéaire
regression_lineaire <- lm(tmin ~ tmoy, data = donnees_temperature)
## coefficient
regression_lineaire
# validation du modèle (montré les résidus)
summary(regression_lineaire)
# Visualisation des donnees
donnees_temperature |>
ggplot()+
aes(x=tmoy,y=tmin)+
geom_point(alpha=0.2,size=0.2)+
theme_classic()
# Autre visualisation
donnees_temperature |>
ggplot() +
aes(x = tmoy, y = tmin) +
geom_point(alpha  = 0.2, size = 0.2) +
geom_smooth(method = "lm") +
geom_abline(aes(slope = 0.86, intercept = -2.93), color = "red") +
ggpubr::stat_regline_equation() +
theme_classic()
# représentation graphique
donnees_temperature |>
ggplot() +
aes(x = tmin, y = tmax) +
geom_point(alpha  = 0.2, size = 0.2) +
theme_classic()
# calcul de l'équation linéaire
regression_lineaire <- lm(tmax ~ tmin, data = donnees_temperature)
## coefficient
regression_lineaire
# validation du modèle (montré les résidus)
summary(regression_lineaire)
# autre visualisation
donnees_temperature |>
ggplot() +
aes(x = tmin, y = tmax) +
geom_point(alpha  = 0.2, size = 0.2) +
geom_smooth(method = "lm") +
ggpubr::stat_regline_equation() +
theme_classic()
# représentation graphique
donnees_temperature |>
ggplot() +
aes(x = tmin, y = densite_humaine_par_km_carre ) +
geom_point(alpha  = 0.2, size = 0.2) +
theme_classic()
donnees_temperature_province <- donnees_temperature |>
filter(region != "Île-de-France") |>
droplevels()
table(donnees_temperature_province$region, donnees_temperature_province$densite_pop, useNA = "ifany")
count(donnees_temperature_province, region, densite_pop, .drop = FALSE)
count(donnees_temperature_province, region, densite_pop)
donnees_temperature_province |>
count(region, densite_pop) |>
ggplot() +
aes(x = densite_pop, y = region, fill = n) +
geom_tile() +
theme_classic()
table(donnees_temperature_province$region, donnees_temperature_province$densite_pop) |>
chisq.test()
donnees_temperature |>
ggplot() +
aes(x = densite_pop, y = tmin, color = densite_pop) +
geom_boxplot() +
theme_classic()
bartlett.test(tmin ~ densite_pop, data = donnees_temperature)
anova <- aov(
tmin ~ densite_pop, data = donnees_temperature
)
summary(anova)
# vérification de la normalité des résidus
plot(anova)
TukeyHSD(anova)
tukey <- glht(anova, linfct = mcp(densite_pop = "Tukey"))
library(readr)
library(dplyr)
library(forcats)
library(ggplot2)
donnees_temperature <- read_csv(
"data/donnees_temperature_corrigees.csv",
col_types = c("fDfnnnfffnffnnn")
)
library(readr)
library(dplyr)
library(forcats)
library(ggplot2)
donnees_temperature <- read_csv(
"data/donnees_temperature_corrigees.csv",
col_types = c("fDfnnnfffnffnnn")
)
donnees_temperature <- donnees_temperature |>
mutate(
departement=fct_relevel(donnees_temperature$departement,sort),
region=fct_relevel(donnees_temperature$region,sort),
code_insee_department=fct_inseq(donnees_temperature$code_insee_departement)
)
summary(donnees_temperature)
#Représentation graphique
# représentation graphique
donnees_temperature |>
ggplot() +
aes(x = tmoy, y = tmin) +
geom_point(alpha  = 0.2, size = 0.2) +
theme_classic()
#calcul de l'équation linéaire
regression_lineaire <- lm(tmin ~ tmoy, data = donnees_temperature)
## coefficient
regression_lineaire
# validation du modèle (montré les résidus)
summary(regression_lineaire)
# Visualisation des donnees
donnees_temperature |>
ggplot()+
aes(x=tmoy,y=tmin)+
geom_point(alpha=0.2,size=0.2)+
theme_classic()
# Autre visualisation
donnees_temperature |>
ggplot() +
aes(x = tmoy, y = tmin) +
geom_point(alpha  = 0.2, size = 0.2) +
geom_smooth(method = "lm") +
geom_abline(aes(slope = 0.86, intercept = -2.93), color = "red") +
ggpubr::stat_regline_equation() +
theme_classic()
# représentation graphique
donnees_temperature |>
ggplot() +
aes(x = tmin, y = tmax) +
geom_point(alpha  = 0.2, size = 0.2) +
theme_classic()
# calcul de l'équation linéaire
regression_lineaire <- lm(tmax ~ tmin, data = donnees_temperature)
## coefficient
regression_lineaire
# validation du modèle (montré les résidus)
summary(regression_lineaire)
# autre visualisation
donnees_temperature |>
ggplot() +
aes(x = tmin, y = tmax) +
geom_point(alpha  = 0.2, size = 0.2) +
geom_smooth(method = "lm") +
ggpubr::stat_regline_equation() +
theme_classic()
# représentation graphique
donnees_temperature |>
ggplot() +
aes(x = tmin, y = densite_humaine_par_km_carre ) +
geom_point(alpha  = 0.2, size = 0.2) +
theme_classic()
donnees_temperature_province <- donnees_temperature |>
filter(region != "Île-de-France") |>
droplevels()
table(donnees_temperature_province$region, donnees_temperature_province$densite_pop, useNA = "ifany")
count(donnees_temperature_province, region, densite_pop, .drop = FALSE)
count(donnees_temperature_province, region, densite_pop)
donnees_temperature_province |>
count(region, densite_pop) |>
ggplot() +
aes(x = densite_pop, y = region, fill = n) +
geom_tile() +
theme_classic()
table(donnees_temperature_province$region, donnees_temperature_province$densite_pop) |>
chisq.test()
donnees_temperature |>
ggplot() +
aes(x = densite_pop, y = tmin, color = densite_pop) +
geom_boxplot() +
theme_classic()
bartlett.test(tmin ~ densite_pop, data = donnees_temperature)
anova <- aov(
tmin ~ densite_pop, data = donnees_temperature
)
summary(anova)
# vérification de la normalité des résidus
plot(anova)
TukeyHSD(anova)
tukey <- glht(anova, linfct = mcp(densite_pop = "Tukey"))
departement_quanti <-
st_read(
dsn = "data/departement",
layer = "DEPARTEMENT"
) |>
inner_join(
donnees_temperature |>
group_by(
departement,
mois) |>
summarise(
temperature_moyenne = mean(tmoy)
),
by = c("NOM" = "departement")
) |>
st_transform(crs = '+proj=longlat +datum=WGS84')
install.packages("sf")
departement_quanti <-
st_read(
dsn = "data/departement",
layer = "DEPARTEMENT"
) |>
inner_join(
donnees_temperature |>
group_by(
departement,
mois) |>
summarise(
temperature_moyenne = mean(tmoy)
),
by = c("NOM" = "departement")
) |>
st_transform(crs = '+proj=longlat +datum=WGS84')
departement_quanti <-
st_read(
dsn = "data/departement",
layer = "DEPARTEMENT"
) |>
inner_join(
donnees_temperature |>
group_by(
departement,
mois) |>
summarise(
temperature_moyenne = mean(tmoy)
),
by = c("NOM" = "departement")
) |>
st_transformer(crs = '+proj=longlat +datum=WGS84')
anova <- aov(
tmin ~ densite_pop, data = donnees_temperature
)
summary(anova)
# vérification de la normalité des résidus
plot(anova)
TukeyHSD(anova)
tukey <- glht(anova, linfct = mcp(densite_pop = "Tukey"))
kruskal.test(
tmoy ~ densite_pop, data = donnees_temperature
)
PMCMRplus::kwAllPairsNemenyiTest(
tmoy ~ densite_pop, data = donnees_temperature
)
kruskal.test(
tmoy ~ densite_pop, data = donnees_temperature
)
PMCMRplus::kwAllPairsNemenyiTest(
tmoy ~ densite_pop, data = donnees_temperature
)
install.packages("PMCMRplus")
library(PMCMRplus)Y
library(PMCMRplus)
kruskal.test(
tmoy ~ densite_pop, data = donnees_temperature
)
PMCMRplus::kwAllPairsNemenyiTest(
tmoy ~ densite_pop, data = donnees_temperature
)
library(PMCMRplus)
kruskal.test(
tmoy ~ densite_pop, data = donnees_temperature
)
PMCMRplus::kwAllPairsNemenyiTest(
tmoy ~ densite_pop, data = donnees_temperature
)
library(sf)
departement_quanti <-
st_read(
dsn = "data/departement",
layer = "DEPARTEMENT"
) |>
inner_join(
donnees_temperature |>
group_by(
departement,
mois) |>
summarise(
temperature_moyenne = mean(tmoy)
),
by = c("NOM" = "departement")
) |>
st_transform(crs = '+proj=longlat +datum=WGS84')
ggplot(departement_quanti) +
aes(fill = temperature_moyenne) +
geom_sf() +
coord_sf(crs = 4326) +
facet_wrap(~ mois) +
theme_void()
library(readr)
library(dplyr)
library(forcats)
library(ggplot2)
library(sf)
donnees_temperature <- read_csv(
"data/donnees_temperature_corrigees.csv",
col_types = c("fDfnnnfffnffnnn")
)
donnees_temperature <- donnees_temperature |>
mutate(
departement=fct_relevel(donnees_temperature$departement,sort),
region=fct_relevel(donnees_temperature$region,sort),
code_insee_department=fct_inseq(donnees_temperature$code_insee_departement)
)
summary(donnees_temperature)
#Représentation graphique
# représentation graphique
donnees_temperature |>
ggplot() +
aes(x = tmoy, y = tmin) +
geom_point(alpha  = 0.2, size = 0.2) +
theme_classic()
#calcul de l'équation linéaire
regression_lineaire <- lm(tmin ~ tmoy, data = donnees_temperature)
## coefficient
regression_lineaire
# validation du modèle (montré les résidus)
summary(regression_lineaire)
# Visualisation des donnees
donnees_temperature |>
ggplot()+
aes(x=tmoy,y=tmin)+
geom_point(alpha=0.2,size=0.2)+
theme_classic()
# Autre visualisation
donnees_temperature |>
ggplot() +
aes(x = tmoy, y = tmin) +
geom_point(alpha  = 0.2, size = 0.2) +
geom_smooth(method = "lm") +
geom_abline(aes(slope = 0.86, intercept = -2.93), color = "red") +
ggpubr::stat_regline_equation() +
theme_classic()
# représentation graphique
donnees_temperature |>
ggplot() +
aes(x = tmin, y = tmax) +
geom_point(alpha  = 0.2, size = 0.2) +
theme_classic()
# calcul de l'équation linéaire
regression_lineaire <- lm(tmax ~ tmin, data = donnees_temperature)
## coefficient
regression_lineaire
# validation du modèle (montré les résidus)
summary(regression_lineaire)
# autre visualisation
donnees_temperature |>
ggplot() +
aes(x = tmin, y = tmax) +
geom_point(alpha  = 0.2, size = 0.2) +
geom_smooth(method = "lm") +
ggpubr::stat_regline_equation() +
theme_classic()
# représentation graphique
donnees_temperature |>
ggplot() +
aes(x = tmin, y = densite_humaine_par_km_carre ) +
geom_point(alpha  = 0.2, size = 0.2) +
theme_classic()
donnees_temperature_province <- donnees_temperature |>
filter(region != "Île-de-France") |>
droplevels()
table(donnees_temperature_province$region, donnees_temperature_province$densite_pop, useNA = "ifany")
count(donnees_temperature_province, region, densite_pop, .drop = FALSE)
count(donnees_temperature_province, region, densite_pop)
donnees_temperature_province |>
count(region, densite_pop) |>
ggplot() +
aes(x = densite_pop, y = region, fill = n) +
geom_tile() +
theme_classic()
table(donnees_temperature_province$region, donnees_temperature_province$densite_pop) |>
chisq.test()
donnees_temperature |>
ggplot() +
aes(x = densite_pop, y = tmin, color = densite_pop) +
geom_boxplot() +
theme_classic()
bartlett.test(tmin ~ densite_pop, data = donnees_temperature)
anova <- aov(
tmin ~ densite_pop, data = donnees_temperature
)
summary(anova)
# vérification de la normalité des résidus
plot(anova)
TukeyHSD(anova)
tukey <- glht(anova, linfct = mcp(densite_pop = "Tukey"))
table(donnees_temperature_province$region, donnees_temperature_province$densite_pop) |>
chisq.test()
